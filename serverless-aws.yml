service: sls-movie-api

variablesResolutionMode: '20210326'

provider:
  name: aws
  runtime: nodejs14.x
  region: ${env:AWS_REGION}
  lambdaHashingVersion: '20201221'
  logRetentionInDays: ${env:LOG_RETENTION_DAYS}
  stage: ${opt:stage, 'dev'}
  environment:
    PGHOST: ${self:custom.POSTGRESQL.HOST}
    PGPORT: ${self:custom.POSTGRESQL.PORT}
    PGDATABASE: ${env:DATABASE_NAME}
    PGUSER: ${env:DATABASE_USERNAME}
    PGPASSWORD: ${env:DATABASE_PASSWORD}

functions:
  graphql:
    handler: src/apollo-server-lambda.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager
  - serverless-export-env

custom:
  customDomain:
    domainName: ${env:DOMAIN_NAME}
    certificateName: ${env:CERTIFICATE_NAME}
    basePath: ''
    createRoute53Record: true
  webpack:
    includeModules: true
    excludeFiles: src/apollo-server-azure-functions.ts
    packager: 'yarn'
    keepOutputDirectory: true
  export-env:
    filename: .env
    overwrite: false
    enableOffline: true
  POSTGRESQL:
    HOST:
      Fn::GetAtt: [PostgresRDSInstance, Endpoint.Address]
      # ${env:AWS_POSTGRESQL_HOST}
    PORT:
      Fn::GetAtt: [PostgresRDSInstance, Endpoint.Port]
      # ${env:POSTGRESQL_PORT}

resources:
  Resources:
    ServerlessSecurityGroup: ${file(./resources/aws/ServerlessSecurityGroup.yml)}
    PostgresRDSInstance: ${file(./resources/aws/PostgresRDSInstance.yml)}
