service: sls-movie-api

variablesResolutionMode: '20210326'

provider:
  name: aws
  runtime: nodejs14.x
  region: ${env:AWS_REGION}
  lambdaHashingVersion: '20201221'
  logRetentionInDays: ${env:LOG_RETENTION_DAYS}
  stage: ${opt:stage, 'dev'}
  environment:
    # POSTGRESQL_HOST: ${self:custom.POSTGRESQL.HOST}
    # POSTGRESQL_PORT: ${self:custom.POSTGRESQL.PORT}

    # POSTGRESQL_HOST: Fn::GetAtt [PostgresRDSInstance, Endpoint.Address]
    # POSTGRESQL_PORT: Fn::GetAtt [PostgresRDSInstance, Endpoint.Port]
    # POSTGRESQL_HOST: ${env:POSTGRESQL_HOST}
    # POSTGRESQL_PORT: ${env:POSTGRESQL_PORT}
    # DB_NAME: ${self:custom.DB_NAME}
    # USERNAME: ${self:custom.USERNAME}
    # PASSWORD: ${self:custom.PASSWORD}

    PGHOST: ${self:custom.POSTGRESQL.HOST}
    PGPORT: ${self:custom.POSTGRESQL.PORT}
    PGDATABASE: ${self:custom.DB_NAME}
    PGUSER: ${self:custom.USERNAME}
    PGPASSWORD: ${self:custom.PASSWORD}

functions:
  graphql:
    handler: src/apollo-server-lambda.graphqlHandler
    events:
      - http:
          path: graphql
          method: post
          cors: true
      - http:
          path: graphql
          method: get
          cors: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-domain-manager
  - serverless-export-env

custom:
  customDomain:
    domainName: ${env:DOMAIN_NAME}
    certificateName: ${env:CERTIFICATE_NAME}
    basePath: ''
    createRoute53Record: true
  webpack:
    includeModules: true
    excludeFiles: src/apollo-server-azure-functions.ts
  export-env:
    filename: .env
    overwrite: false
    enableOffline: true
  DB_NAME: movies
  USERNAME: ${env:DATABASE_USERNAME}
  PASSWORD: ${env:DATABASE_PASSWORD}
  POSTGRESQL:
    HOST:
      # Fn::GetAtt: [PostgresRDSInstance, Endpoint.Address]
      ${env:POSTGRESQL_HOST}
    PORT:
      # Fn::GetAtt: [PostgresRDSInstance, Endpoint.Port]
      ${env:POSTGRESQL_PORT}

resources:
  Resources:
    ServerlessSecurityGroup: ${file(./resources/ServerlessSecurityGroup.yml)}
    PostgresRDSInstance: ${file(./resources/PostgresRDSInstance.yml)}
